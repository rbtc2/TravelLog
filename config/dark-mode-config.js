/**
 * Îã§ÌÅ¨Î™®Îìú ÏÑ§Ï†ï ÌååÏùº
 * 
 * üéØ Î™©Ï†Å:
 * - Îã§ÌÅ¨Î™®Îìú ÏÉâÏÉÅ Î∞è Ïä§ÌÉÄÏùº Ï§ëÏïô Í¥ÄÎ¶¨
 * - ÏùºÍ¥ÄÎêú Îã§ÌÅ¨Î™®Îìú ÌÖåÎßà Ï†ÅÏö©
 * - Ïâ¨Ïö¥ ÌÖåÎßà Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï
 * 
 * @version 1.0.0
 * @since 2024-12-29
 */

export const darkModeConfig = {
    // Í∏∞Î≥∏ ÏÉâÏÉÅ ÌåîÎ†àÌä∏
    colors: {
        // Î∞∞Í≤Ω ÏÉâÏÉÅ
        background: {
            primary: '#1a1a1a',      // Î©îÏù∏ Î∞∞Í≤Ω
            secondary: '#2d2d2d',    // Ïπ¥Îìú/Ïª®ÌÖåÏù¥ÎÑà Î∞∞Í≤Ω
            tertiary: '#3a3a3a',     // Ìò∏Î≤Ñ/Ïï°Ìã∞Î∏å Î∞∞Í≤Ω
            overlay: 'rgba(0, 0, 0, 0.7)', // Ïò§Î≤ÑÎ†àÏù¥ Î∞∞Í≤Ω
        },
        
        // ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ
        text: {
            primary: '#f7fafc',      // Ï£ºÏöî ÌÖçÏä§Ìä∏
            secondary: '#a0aec0',    // Î≥¥Ï°∞ ÌÖçÏä§Ìä∏
            muted: '#718096',        // ÎπÑÌôúÏÑ± ÌÖçÏä§Ìä∏
            inverse: '#1a202c',      // Î∞òÏ†Ñ ÌÖçÏä§Ìä∏
        },
        
        // ÌÖåÎëêÎ¶¨ ÏÉâÏÉÅ
        border: {
            primary: '#4a5568',      // Ï£ºÏöî ÌÖåÎëêÎ¶¨
            secondary: '#718096',    // Î≥¥Ï°∞ ÌÖåÎëêÎ¶¨
            muted: '#a0aec0',        // ÎπÑÌôúÏÑ± ÌÖåÎëêÎ¶¨
            focus: '#4dabf7',        // Ìè¨Ïª§Ïä§ ÌÖåÎëêÎ¶¨
        },
        
        // ÏÉÅÌÉú ÏÉâÏÉÅ
        status: {
            success: '#48bb78',      // ÏÑ±Í≥µ
            warning: '#ed8936',      // Í≤ΩÍ≥†
            error: '#f56565',        // Ïò§Î•ò
            info: '#4299e1',         // Ï†ïÎ≥¥
        },
        
        // Î∏åÎûúÎìú ÏÉâÏÉÅ
        brand: {
            primary: '#4dabf7',      // Ï£ºÏöî Î∏åÎûúÎìú ÏÉâÏÉÅ
            secondary: '#667eea',    // Î≥¥Ï°∞ Î∏åÎûúÎìú ÏÉâÏÉÅ
            accent: '#9f7aea',       // Í∞ïÏ°∞ ÏÉâÏÉÅ
        }
    },
    
    // Í∑∏Î¶ºÏûê ÏÑ§Ï†ï
    shadows: {
        sm: '0 1px 3px rgba(0, 0, 0, 0.3)',
        md: '0 4px 6px rgba(0, 0, 0, 0.3)',
        lg: '0 10px 15px rgba(0, 0, 0, 0.4)',
        xl: '0 20px 25px rgba(0, 0, 0, 0.5)',
        '2xl': '0 25px 50px rgba(0, 0, 0, 0.6)',
    },
    
    // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÑ§Ï†ï
    animations: {
        duration: {
            fast: '0.15s',
            normal: '0.3s',
            slow: '0.5s',
        },
        easing: {
            ease: 'cubic-bezier(0.4, 0, 0.2, 1)',
            easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
            easeOut: 'cubic-bezier(0, 0, 0.2, 1)',
            easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
        }
    },
    
    // Ïª¥Ìè¨ÎÑåÌä∏Î≥Ñ ÏÑ§Ï†ï
    components: {
        // Î≤ÑÌäº
        button: {
            primary: {
                background: '#4dabf7',
                color: '#ffffff',
                border: '1px solid #4dabf7',
                hover: {
                    background: '#4299e1',
                    transform: 'translateY(-1px)',
                }
            },
            secondary: {
                background: 'transparent',
                color: '#4dabf7',
                border: '1px solid #4dabf7',
                hover: {
                    background: '#4dabf7',
                    color: '#ffffff',
                }
            }
        },
        
        // Ïπ¥Îìú
        card: {
            background: '#2d2d2d',
            border: '1px solid #4a5568',
            borderRadius: '12px',
            padding: '20px',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.3)',
            hover: {
                transform: 'translateY(-2px)',
                boxShadow: '0 10px 15px rgba(0, 0, 0, 0.4)',
            }
        },
        
        // ÏûÖÎ†• ÌïÑÎìú
        input: {
            background: '#2d2d2d',
            color: '#f7fafc',
            border: '1px solid #4a5568',
            borderRadius: '8px',
            padding: '12px 16px',
            focus: {
                borderColor: '#4dabf7',
                boxShadow: '0 0 0 3px rgba(77, 171, 247, 0.1)',
            }
        },
        
        // Î™®Îã¨
        modal: {
            background: '#2d2d2d',
            border: '1px solid #4a5568',
            borderRadius: '16px',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.6)',
            overlay: 'rgba(0, 0, 0, 0.7)',
        },
        
        // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
        navigation: {
            background: '#2d2d2d',
            border: '1px solid #4a5568',
            boxShadow: '0 -2px 10px rgba(0, 0, 0, 0.3)',
            item: {
                color: '#a0aec0',
                hover: {
                    color: '#4dabf7',
                    background: '#3a3a3a',
                },
                active: {
                    color: '#4dabf7',
                    background: '#3a3a3a',
                }
            }
        }
    },
    
    // ÌéòÏù¥ÏßÄÎ≥Ñ ÏÑ§Ï†ï
    pages: {
        home: {
            cardBackground: '#2d2d2d',
            cardBorder: '#4a5568',
            titleColor: '#f7fafc',
            subtitleColor: '#a0aec0',
        },
        search: {
            inputBackground: '#2d2d2d',
            inputBorder: '#4a5568',
            resultBackground: '#2d2d2d',
            resultBorder: '#4a5568',
        },
        calendar: {
            gridBackground: '#2d2d2d',
            dayBackground: '#3a3a3a',
            todayBackground: '#4dabf7',
            selectedBackground: '#667eea',
        },
        myLogs: {
            profileBackground: '#2d2d2d',
            statsBackground: '#3a3a3a',
            cardBackground: '#2d2d2d',
            menuBackground: '#2d2d2d',
        }
    },
    
    // Ï†ëÍ∑ºÏÑ± ÏÑ§Ï†ï
    accessibility: {
        // Í≥†ÎåÄÎπÑ Î™®Îìú
        highContrast: {
            background: {
                primary: '#000000',
                secondary: '#1a1a1a',
            },
            text: {
                primary: '#ffffff',
                secondary: '#ffffff',
            },
            border: {
                primary: '#ffffff',
                secondary: '#ffffff',
            }
        },
        
        // Ïï†ÎãàÎ©îÏù¥ÏÖò Í∞êÏÜå
        reducedMotion: {
            duration: '0.01s',
            easing: 'linear',
        }
    },
    
    // ÏûêÎèô ÏàòÏ†ï ÏÑ§Ï†ï
    autoFix: {
        enabled: true,
        contrastThreshold: 4.5, // WCAG AA Í∏∞Ï§Ä
        brightnessThreshold: 128,
        autoConvertColors: true,
        autoConvertShadows: true,
    },
    
    // Í≤ÄÏ¶ù Í∑úÏπô
    validation: {
        requiredProperties: [
            'background-color',
            'color',
            'border-color'
        ],
        optionalProperties: [
            'box-shadow',
            'text-shadow',
            'outline'
        ],
        forbiddenValues: [
            'transparent',
            'inherit',
            'initial',
            'unset'
        ]
    }
};

// CSS Î≥ÄÏàò ÏÉùÏÑ± Ìï®Ïàò
export function generateCSSVariables(config = darkModeConfig) {
    const variables = {};
    
    // ÏÉâÏÉÅ Î≥ÄÏàò ÏÉùÏÑ±
    Object.entries(config.colors).forEach(([category, colors]) => {
        Object.entries(colors).forEach(([name, value]) => {
            const varName = `--dark-${category}-${name}`;
            variables[varName] = value;
        });
    });
    
    // Í∑∏Î¶ºÏûê Î≥ÄÏàò ÏÉùÏÑ±
    Object.entries(config.shadows).forEach(([name, value]) => {
        variables[`--dark-shadow-${name}`] = value;
    });
    
    // Ïï†ÎãàÎ©îÏù¥ÏÖò Î≥ÄÏàò ÏÉùÏÑ±
    Object.entries(config.animations.duration).forEach(([name, value]) => {
        variables[`--dark-duration-${name}`] = value;
    });
    
    Object.entries(config.animations.easing).forEach(([name, value]) => {
        variables[`--dark-easing-${name}`] = value;
    });
    
    return variables;
}

// CSS Î≥ÄÏàòÎ•º CSS Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
export function generateCSSString(config = darkModeConfig) {
    const variables = generateCSSVariables(config);
    let css = ':root.dark {\n';
    
    Object.entries(variables).forEach(([name, value]) => {
        css += `    ${name}: ${value};\n`;
    });
    
    css += '}\n';
    
    return css;
}

// Ïª¥Ìè¨ÎÑåÌä∏Î≥Ñ CSS ÏÉùÏÑ±
export function generateComponentCSS(componentName, config = darkModeConfig) {
    const component = config.components[componentName];
    if (!component) return '';
    
    let css = `.dark .${componentName} {\n`;
    
    Object.entries(component).forEach(([property, value]) => {
        if (typeof value === 'string' || typeof value === 'number') {
            css += `    ${property}: ${value};\n`;
        }
    });
    
    css += '}\n';
    
    // Ìò∏Î≤Ñ ÏÉÅÌÉú
    if (component.hover) {
        css += `.dark .${componentName}:hover {\n`;
        Object.entries(component.hover).forEach(([property, value]) => {
            css += `    ${property}: ${value};\n`;
        });
        css += '}\n';
    }
    
    // Ïï°Ìã∞Î∏å ÏÉÅÌÉú
    if (component.active) {
        css += `.dark .${componentName}.active {\n`;
        Object.entries(component.active).forEach(([property, value]) => {
            css += `    ${property}: ${value};\n`;
        });
        css += '}\n';
    }
    
    return css;
}

// ÌéòÏù¥ÏßÄÎ≥Ñ CSS ÏÉùÏÑ±
export function generatePageCSS(pageName, config = darkModeConfig) {
    const page = config.pages[pageName];
    if (!page) return '';
    
    let css = `.dark .${pageName}-container {\n`;
    
    Object.entries(page).forEach(([property, value]) => {
        css += `    ${property}: ${value};\n`;
    });
    
    css += '}\n';
    
    return css;
}

// Ï†ÑÏ≤¥ Îã§ÌÅ¨Î™®Îìú CSS ÏÉùÏÑ±
export function generateFullDarkModeCSS(config = darkModeConfig) {
    let css = '';
    
    // Í∏∞Î≥∏ Î≥ÄÏàò
    css += generateCSSString(config);
    css += '\n';
    
    // Ïª¥Ìè¨ÎÑåÌä∏Î≥Ñ CSS
    Object.keys(config.components).forEach(component => {
        css += generateComponentCSS(component, config);
        css += '\n';
    });
    
    // ÌéòÏù¥ÏßÄÎ≥Ñ CSS
    Object.keys(config.pages).forEach(page => {
        css += generatePageCSS(page, config);
        css += '\n';
    });
    
    return css;
}

// ÏÑ§Ï†ï Í≤ÄÏ¶ù
export function validateConfig(config = darkModeConfig) {
    const errors = [];
    
    // ÌïÑÏàò ÏÑπÏÖò ÌôïÏù∏
    const requiredSections = ['colors', 'shadows', 'animations', 'components'];
    requiredSections.forEach(section => {
        if (!config[section]) {
            errors.push(`ÌïÑÏàò ÏÑπÏÖò ÎàÑÎùΩ: ${section}`);
        }
    });
    
    // ÏÉâÏÉÅ ÌòïÏãù Í≤ÄÏ¶ù
    if (config.colors) {
        Object.entries(config.colors).forEach(([category, colors]) => {
            Object.entries(colors).forEach(([name, value]) => {
                if (typeof value !== 'string') {
                    errors.push(`ÏûòÎ™ªÎêú ÏÉâÏÉÅ ÌòïÏãù: ${category}.${name}`);
                }
            });
        });
    }
    
    return {
        isValid: errors.length === 0,
        errors: errors
    };
}

export default darkModeConfig;
