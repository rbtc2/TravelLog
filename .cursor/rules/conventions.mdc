---
globs: *.js,*.html,*.css
description: TravelLog coding conventions and best practices
---

# 📝 TravelLog Coding Conventions

## 📋 Overview
This document outlines the coding conventions, best practices, and standards for the TravelLog project. Follow these guidelines to maintain code consistency and quality.

## 🎯 Core Principles

### 1. **Consistency**
- Use consistent naming conventions across all files
- Follow established patterns and structures
- Maintain uniform code formatting

### 2. **Readability**
- Write self-documenting code
- Use meaningful variable and function names
- Add clear comments for complex logic

### 3. **Maintainability**
- Keep functions small and focused
- Avoid deep nesting and complex logic
- Use modular architecture patterns

### 4. **Performance**
- Optimize for mobile devices
- Minimize DOM manipulation
- Use efficient algorithms and data structures

## 🚀 JavaScript Conventions

### **File Structure**
```javascript
/**
 * File description and purpose
 * @version 1.0.0
 * @since 2024-12-29
 */

// 1. Imports (ES6 modules)
import { ModuleName } from './path/to/module.js';

// 2. Constants
const CONSTANT_NAME = 'value';

// 3. Classes/Functions
class ClassName {
    constructor() {
        // Constructor logic
    }
    
    // Public methods
    publicMethod() {
        // Method implementation
    }
    
    // Private methods (prefix with underscore)
    _privateMethod() {
        // Private implementation
    }
}

// 4. Exports
export default ClassName;
```

### **Naming Conventions**

#### **Variables and Functions**
```javascript
// Use camelCase for variables and functions
const userName = 'john_doe';
const isLoggedIn = true;
const travelLogs = [];

function getUserData() { }
function calculateTotalDays() { }
function handleTabSwitch() { }
```

#### **Classes and Constructors**
```javascript
// Use PascalCase for classes and constructors
class TravelLogManager { }
class SearchEngine { }
class CalendarRenderer { }

// Constructor functions
function TravelLogManager() { }
```

#### **Constants**
```javascript
// Use UPPER_SNAKE_CASE for constants
const MAX_LOG_COUNT = 1000;
const API_BASE_URL = 'https://api.travellog.com';
const DEFAULT_PAGE_SIZE = 20;
```

#### **Private Members**
```javascript
// Use underscore prefix for private members
class MyClass {
    constructor() {
        this._privateProperty = 'value';
    }
    
    _privateMethod() {
        // Private method implementation
    }
}
```

### **Function Declarations**

#### **Arrow Functions vs Function Declarations**
```javascript
// Use function declarations for main functions
function processTravelData(data) {
    // Main logic
}

// Use arrow functions for callbacks and short functions
const filteredLogs = logs.filter(log => log.country === 'Japan');
const sortedLogs = logs.sort((a, b) => a.date - b.date);

// Use arrow functions for event handlers
button.addEventListener('click', (event) => {
    handleButtonClick(event);
});
```

#### **Async/Await Pattern**
```javascript
// Prefer async/await over Promises
async function loadTravelLogs() {
    try {
        const response = await fetch('/api/logs');
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Failed to load travel logs:', error);
        throw error;
    }
}

// Use Promise.all for parallel operations
async function loadMultipleData() {
    try {
        const [logs, countries, settings] = await Promise.all([
            loadTravelLogs(),
            loadCountries(),
            loadSettings()
        ]);
        return { logs, countries, settings };
    } catch (error) {
        console.error('Failed to load data:', error);
    }
}
```

### **Error Handling**

#### **Try-Catch Blocks**
```javascript
// Always use try-catch for async operations
async function saveTravelLog(logData) {
    try {
        const result = await storageManager.saveLog(logData);
        console.log('Travel log saved successfully');
        return result;
    } catch (error) {
        console.error('Failed to save travel log:', error);
        showErrorMessage('저장 중 오류가 발생했습니다.');
        throw error;
    }
}

// Use try-catch for synchronous operations that might fail
function parseTravelData(jsonString) {
    try {
        return JSON.parse(jsonString);
    } catch (error) {
        console.error('Failed to parse travel data:', error);
        return null;
    }
}
```

#### **Error Messages**
```javascript
// Use Korean for user-facing error messages
const ERROR_MESSAGES = {
    NETWORK_ERROR: '네트워크 연결을 확인해주세요.',
    INVALID_DATA: '유효하지 않은 데이터입니다.',
    SAVE_FAILED: '저장에 실패했습니다.',
    LOAD_FAILED: '데이터를 불러오는데 실패했습니다.'
};

// Use English for console logs and debugging
console.error('Failed to initialize search engine:', error);
console.warn('Performance warning: Search took longer than expected');
console.log('Search completed successfully');
```

### **API Integration Error Handling** ⭐ **NEW**
```javascript
// API-specific error messages (Korean for users)
const API_ERROR_MESSAGES = {
    'Network request failed': '네트워크 연결을 확인해주세요.',
    'API 응답 오류: 404': '요청한 데이터를 찾을 수 없습니다.',
    'API 응답 오류: 500': '서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',
    'API 응답 오류: 429': '너무 많은 요청이 발생했습니다. 잠시 후 다시 시도해주세요.',
    'API 응답 오류: 403': 'API 접근이 거부되었습니다.',
    'API 응답 오류: 401': '인증이 필요합니다.',
    'API 응답 데이터 형식이 올바르지 않습니다.': '서버에서 잘못된 데이터를 반환했습니다.',
    'Request timeout': '요청 시간이 초과되었습니다. 네트워크 상태를 확인해주세요.',
    'Failed to fetch': '네트워크 연결에 실패했습니다.',
    'AbortError': '요청이 취소되었습니다.'
};

// Convert API errors to Korean
function getAPIErrorMessage(error) {
    // Check for specific error messages first
    if (API_ERROR_MESSAGES[error.message]) {
        return API_ERROR_MESSAGES[error.message];
    }
    
    // Check for HTTP status codes
    if (error.message.includes('API 응답 오류:')) {
        const statusMatch = error.message.match(/API 응답 오류: (\d+)/);
        if (statusMatch) {
            const statusCode = statusMatch[1];
            const statusMessages = {
                '400': '잘못된 요청입니다.',
                '401': '인증이 필요합니다.',
                '403': '접근이 거부되었습니다.',
                '404': '요청한 데이터를 찾을 수 없습니다.',
                '429': '너무 많은 요청이 발생했습니다. 잠시 후 다시 시도해주세요.',
                '500': '서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',
                '502': '서버가 일시적으로 사용할 수 없습니다.',
                '503': '서비스를 사용할 수 없습니다. 잠시 후 다시 시도해주세요.',
                '504': '요청 시간이 초과되었습니다.'
            };
            return statusMessages[statusCode] || error.message;
        }
    }
    
    // Check for network errors
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
        return '네트워크 연결을 확인해주세요.';
    }
    
    if (error.name === 'AbortError') {
        return '요청이 취소되었습니다.';
    }
    
    // Default fallback
    return error.message || '알 수 없는 오류가 발생했습니다.';
}

// API error handling pattern
async function handleAPIOperation(operation, fallbackData = null) {
    try {
        const result = await operation();
        return result;
    } catch (error) {
        console.error('API operation failed:', error);
        
        // Show user-friendly error message
        const userMessage = getAPIErrorMessage(error);
        toastManager.show(userMessage, 'error');
        
        // Return fallback data if available
        if (fallbackData) {
            console.warn('Using fallback data due to API error:', error);
            return fallbackData;
        }
        
        throw error;
    }
}

// API retry pattern with exponential backoff
async function retryAPICall(apiCall, maxRetries = 3, baseDelay = 1000) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            return await apiCall();
        } catch (error) {
            if (attempt === maxRetries) {
                throw error;
            }
            
            // Exponential backoff: 1s, 2s, 4s
            const delay = baseDelay * Math.pow(2, attempt - 1);
            console.warn(`API call failed (attempt ${attempt}/${maxRetries}), retrying in ${delay}ms:`, error);
            
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}
```

### **Authentication Error Handling** ⭐ **NEW**
```javascript
// Authentication-specific error messages (Korean for users)
const AUTH_ERROR_MESSAGES = {
    'Invalid login credentials': '이메일 또는 비밀번호가 올바르지 않습니다.',
    'Email not confirmed': '이메일 인증이 필요합니다. 이메일을 확인해주세요.',
    'User already registered': '이미 등록된 이메일입니다.',
    'Password should be at least 6 characters': '비밀번호는 최소 6자 이상이어야 합니다.',
    'Invalid email': '올바른 이메일 형식이 아닙니다.',
    'Signup requires a valid password': '유효한 비밀번호가 필요합니다.',
    'User not found': '사용자를 찾을 수 없습니다.',
    'Too many requests': '너무 많은 요청이 발생했습니다. 잠시 후 다시 시도해주세요.',
    'Network request failed': '네트워크 연결을 확인해주세요.',
    'Invalid API key': 'API 키가 유효하지 않습니다.',
    'Service unavailable': '서비스를 사용할 수 없습니다. 잠시 후 다시 시도해주세요.'
};

// Convert Supabase errors to Korean
function getErrorMessage(error) {
    return AUTH_ERROR_MESSAGES[error.message] || error.message || '알 수 없는 오류가 발생했습니다.';
}

// Authentication error handling pattern
async function handleAuthOperation(operation) {
    try {
        const result = await operation();
        return result;
    } catch (error) {
        console.error('Authentication operation failed:', error);
        toastManager.show(getErrorMessage(error), 'error');
        throw error;
    }
}
```

### **JSDoc Documentation**

#### **Function Documentation**
```javascript
/**
 * Performs a search across travel logs
 * @param {string} query - Search query string
 * @param {Object} options - Search options
 * @param {string[]} options.filters - Array of filter types
 * @param {string} options.sortBy - Sort criteria
 * @param {number} options.limit - Maximum number of results
 * @returns {Promise<Object>} Search results with metadata
 * @throws {Error} When search query is invalid
 * @example
 * const results = await searchTravelLogs('Japan', {
 *   filters: ['country', 'rating'],
 *   sortBy: 'date',
 *   limit: 20
 * });
 */
async function searchTravelLogs(query, options = {}) {
    // Implementation
}
```

#### **Class Documentation**
```javascript
/**
 * Manages travel log data and operations
 * @class TravelLogManager
 * @version 1.0.0
 * @since 2024-12-29
 */
class TravelLogManager {
    /**
     * Creates an instance of TravelLogManager
     * @param {Object} config - Configuration options
     * @param {string} config.storageKey - Local storage key
     * @param {number} config.maxLogs - Maximum number of logs
     */
    constructor(config = {}) {
        // Constructor implementation
    }
}
```

## 🎨 CSS Conventions

> **Note**: Detailed CSS conventions are now managed in the dedicated [styling.mdc](mdc:.cursor/rules/styling.mdc) and [css-namespace.mdc](mdc:.cursor/rules/css-namespace.mdc) files. This section covers only JavaScript-specific styling considerations.

### **JavaScript CSS Class Management**
```javascript
// Use consistent class naming in JavaScript
const className = 'travel-card';
const modifierClass = 'travel-card--featured';
const elementClass = 'travel-card__header';

// Apply classes conditionally
element.classList.toggle('active', isActive);
element.classList.add('travel-card--featured');
```

### **CSS Variable Usage in JavaScript**
```javascript
// Access CSS variables in JavaScript
const primaryColor = getComputedStyle(document.documentElement)
    .getPropertyValue('--primary-color');

// Set CSS variables dynamically
document.documentElement.style.setProperty('--theme-color', '#667eea');
```

## 🌐 HTML Conventions

### **Semantic HTML Structure**
```html
<!-- Use semantic HTML elements -->
<main class="main-content">
    <header class="page-header">
        <h1 class="page-title">여행 일지</h1>
        <p class="page-description">여행의 모든 순간을 기록하세요</p>
    </header>
    
    <section class="content-section">
        <article class="travel-log">
            <h2 class="log-title">일본 여행</h2>
            <time class="log-date" datetime="2024-12-29">2024년 12월 29일</time>
            <p class="log-description">도쿄에서의 첫날</p>
        </article>
    </section>
    
    <aside class="sidebar">
        <nav class="filter-nav">
            <h3 class="filter-title">필터</h3>
            <!-- Filter options -->
        </nav>
    </aside>
</main>
```

### **Accessibility Attributes**
```html
<!-- Always include proper ARIA attributes -->
<button 
    class="action-btn" 
    type="button"
    aria-label="여행 일지 추가"
    aria-expanded="false"
    aria-controls="add-log-modal"
>
    <span class="btn-icon" aria-hidden="true">➕</span>
    <span class="btn-text">일지 추가</span>
</button>

<!-- Use proper form labels -->
<label for="country-select" class="form-label">
    국가 선택
    <span class="required-indicator" aria-label="필수 항목">*</span>
</label>
<select id="country-select" name="country" required>
    <option value="">국가를 선택하세요</option>
    <option value="japan">일본</option>
    <option value="korea">한국</option>
</select>
```

### **Data Attributes**
```html
<!-- Use data attributes for JavaScript targeting -->
<div 
    class="travel-card" 
    data-log-id="log-123"
    data-country="japan"
    data-rating="5"
    data-date="2024-12-29"
>
    <!-- Card content -->
</div>

<!-- Use data attributes for tab navigation -->
<nav class="tab-navigation">
    <button 
        class="tab-btn active" 
        data-tab="home"
        aria-selected="true"
        role="tab"
    >
        <span class="tab-icon" aria-hidden="true">🏠</span>
        <span class="tab-label">홈</span>
    </button>
</nav>
```

## 📱 Mobile-First Development

### **Responsive Design Approach**
```css
/* Start with mobile styles */
.component {
    padding: var(--spacing-sm);
    font-size: var(--font-sm);
}

/* Tablet styles */
@media (min-width: 768px) {
    .component {
        padding: var(--spacing-md);
        font-size: var(--font-base);
    }
}

/* Desktop styles */
@media (min-width: 1024px) {
    .component {
        padding: var(--spacing-lg);
        font-size: var(--font-lg);
    }
}
```

### **Touch-Friendly Design**
```css
/* Ensure minimum touch target size */
.touch-target {
    min-width: 44px;
    min-height: 44px;
    padding: var(--spacing-sm);
}

/* Add touch feedback */
.touch-feedback:active {
    transform: scale(0.98);
    opacity: 0.8;
}
```

## 🔧 Performance Guidelines

### **JavaScript Performance**
```javascript
// Use efficient DOM queries
const elements = document.querySelectorAll('.travel-card');
// Cache DOM elements
const cachedElements = {
    searchInput: document.getElementById('search-input'),
    resultsContainer: document.getElementById('results-container')
};

// Use event delegation for dynamic content
document.addEventListener('click', (event) => {
    if (event.target.matches('.travel-card')) {
        handleCardClick(event.target);
    }
});

// Debounce expensive operations
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

const debouncedSearch = debounce(performSearch, 300);
```

### **CSS Performance**
```css
/* Use efficient selectors */
.travel-card { } /* ✅ Good */
div.travel-card { } /* ❌ Avoid */

/* Use transform and opacity for animations */
.animate {
    transform: translateY(0);
    opacity: 1;
    transition: transform var(--transition-normal), opacity var(--transition-normal);
}

/* Avoid expensive properties in animations */
.animate:hover {
    transform: translateY(-2px); /* ✅ Good */
    /* top: -2px; */ /* ❌ Avoid */
}
```

## 🧪 Testing Conventions

### **Unit Testing Structure**
```javascript
/**
 * Test suite for TravelLogManager
 * @describe TravelLogManager
 */
describe('TravelLogManager', () => {
    let manager;
    
    beforeEach(() => {
        manager = new TravelLogManager();
    });
    
    afterEach(() => {
        manager.cleanup();
    });
    
    /**
     * Test case: Should create travel log successfully
     * @test createTravelLog
     */
    it('should create travel log successfully', async () => {
        // Arrange
        const logData = {
            country: 'Japan',
            city: 'Tokyo',
            startDate: '2024-12-29',
            endDate: '2024-12-31'
        };
        
        // Act
        const result = await manager.createTravelLog(logData);
        
        // Assert
        expect(result).toBeDefined();
        expect(result.id).toBeTruthy();
        expect(result.country).toBe('Japan');
    });
});
```

## 📊 Code Quality Metrics

### **Function Complexity**
- Keep functions under 20 lines when possible
- Maximum 3 levels of nesting
- Use early returns to reduce complexity

### **File Size Guidelines**
- **JavaScript files**: Under 500 lines
- **HTML files**: Under 200 lines

> **Note**: CSS file size guidelines and module separation rules are now managed in [styling.mdc](mdc:.cursor/rules/styling.mdc).

### **Comment Guidelines**
- Comment complex business logic
- Document public APIs with JSDoc
- Use Korean for user-facing comments
- Use English for technical comments

## 🚀 Best Practices Summary

### **DO's**
✅ Use consistent naming conventions
✅ Write self-documenting code
✅ Handle errors gracefully
✅ Add proper ARIA attributes
✅ Use semantic HTML elements
✅ Optimize for performance
✅ Write comprehensive tests
✅ Document public APIs

### **DON'Ts**
❌ Don't ignore error handling
❌ Don't skip accessibility
❌ Don't create overly complex functions
❌ Don't ignore mobile optimization
❌ Don't use non-semantic HTML
❌ Don't skip performance considerations
❌ Don't write untested code
❌ Don't skip documentation

> **Note**: CSS-specific best practices are now managed in [styling.mdc](mdc:.cursor/rules/styling.mdc) and [css-namespace.mdc](mdc:.cursor/rules/css-namespace.mdc).