---
alwaysApply: true
description: TravelLog project architecture and module structure guidelines
---

# 🏗️ TravelLog Architecture Rules

## 📋 Project Overview
TravelLog is a modular SPA (Single Page Application) with a 5-tab structure. Each tab operates independently with dynamic module loading for optimal performance.

## 🏛️ Core Architecture Principles

### 1. **Modularity** 
- Each feature is separated into independent modules
- Clear interfaces and separation of concerns
- Reusable component design

### 2. **Independence**
- Minimal dependencies between tabs
- Each module manages its own lifecycle
- Isolated state management

### 3. **Scalability**
- Plugin-style tab addition
- Independent version management per module
- Progressive feature expansion

### 4. **Performance**
- Lazy Loading (Lazy Loading)
- Memory-efficient resource management
- Optimized rendering pipeline

## 📁 File Structure Guidelines

### **JavaScript Module Structure**
```
js/
├── app.js                     # Main application entry point
├── config/                    # Configuration files
│   ├── app-config.js         # App configuration and metadata
│   └── form-config.js        # Form configuration
├── data/                      # Data management
│   └── countries-manager.js   # Country data management
├── modules/                   # Common modules
│   ├── search/               # Search system (refactored)
│   │   ├── engines/          # Search engines
│   │   ├── handlers/         # Event handlers
│   │   ├── managers/         # State and data managers
│   │   ├── renderers/        # UI renderers
│   │   ├── utils/            # Search utilities
│   │   └── SearchTab.js      # Main search controller
│   ├── calendar/             # Calendar module
│   │   ├── handlers/         # Event handlers
│   │   ├── modals/           # Calendar modals
│   │   ├── CalendarDataManager.js
│   │   ├── CalendarRenderer.js
│   │   └── CalendarUtils.js
│   ├── services/             # Service layer
│   │   └── log-service.js    # Log service
│   ├── ui-components/        # UI components
│   │   ├── country-selector.js
│   │   ├── modal-manager.js
│   │   ├── pagination-manager.js
│   │   ├── toast-manager.js
│   │   └── view-manager.js
│   ├── utils/                # Utility functions
│   │   ├── country-data-manager.js
│   │   ├── demo-data.js
│   │   ├── event-manager.js
│   │   ├── search-utility.js
│   │   └── storage-manager.js
│   ├── log-detail.js         # Log detail module
│   ├── log-edit.js           # Log edit module
│   └── repository.js         # Data repository
└── tabs/                     # Tab modules
    ├── home.js              # Home tab
    ├── search.js            # Search tab (legacy)
    ├── add-log.js           # Add log tab
    ├── calendar.js          # Calendar tab
    └── my-logs/             # My logs tab (modular structure)
        ├── controllers/
        │   └── MyLogsController.js
        ├── views/
        │   ├── HubView.js
        │   ├── LogsListView.js
        │   ├── SettingsView.js
        │   └── TravelReportView.js
        └── my-logs.js       # Main my-logs entry point
```

### **CSS Structure & Architecture Rules**

#### **📁 CSS File Organization**
```
styles/
├── main.css                  # ONLY imports - NO direct styles
├── base/                     # Base styles (variables, reset, typography)
│   ├── variables.css         # CSS variables and design tokens
│   ├── design-tokens.css     # Design system tokens
│   ├── reset.css            # CSS reset
│   ├── typography.css       # Typography
│   ├── layout.css           # Basic layout
│   ├── buttons.css          # Basic button styles
│   ├── forms.css            # Basic form styles
│   └── messages.css         # Message styles
├── components/               # Reusable component styles
│   ├── buttons.css          # Button components
│   ├── cards.css            # Card components
│   ├── forms.css            # Form components
│   ├── modals.css           # Modal components
│   ├── navigation.css       # Navigation components
│   ├── country-selector.css # Country selector
│   ├── calendar-flag-dots.css # Calendar flag dots
│   └── common-components.css # Common UI components
├── layouts/                  # Layout-specific styles
│   ├── main-layout.css      # Main layout
│   ├── tab-content.css      # Tab content layout
│   └── tab-navigation.css   # Tab navigation layout
├── pages/                    # Page-specific styles (MODULAR)
│   ├── home.css             # Home page
│   ├── login.css            # Login page
│   ├── add-log.css          # Add log page
│   ├── search/              # Search page (MODULAR)
│   │   ├── search.css       # Main search styles
│   │   ├── search-filters.css # Filter-specific styles
│   │   ├── search-results.css # Results-specific styles
│   │   └── search-responsive.css # Search responsive styles
│   ├── calendar/            # Calendar page (MODULAR)
│   │   ├── calendar-base.css
│   │   ├── calendar-grid.css
│   │   ├── calendar-bars.css
│   │   ├── calendar-navigation.css
│   │   ├── calendar-modal.css
│   │   ├── calendar-responsive.css
│   │   ├── calendar-dark-mode.css
│   │   └── calendar-animations.css
│   ├── my-logs/             # My logs page (MODULAR)
│   │   ├── base.css
│   │   ├── profile-section.css
│   │   ├── hamburger-menu.css
│   │   ├── log-views.css
│   │   ├── settings.css
│   │   └── charts.css
│   ├── travel-report/       # Travel report page (MODULAR)
│   │   ├── world-exploration.css
│   │   ├── heatmap.css
│   │   ├── basic-stats.css
│   │   ├── yearly-stats.css
│   │   ├── ranking.css
│   │   └── travel-report-section.css
│   ├── log-detail.css       # Log detail page
│   ├── settings.css         # Settings page
│   ├── travel-collection.css # Travel collection page
│   └── error.css            # Error page
└── utilities/                # Utility styles
    ├── accessibility.css    # Accessibility utilities
    ├── animations.css       # Animation utilities
    ├── dark-mode.css        # Dark mode utilities
    ├── navigation-utils.css # Navigation utilities
    ├── responsive.css       # Responsive utilities
    ├── responsive-optimized.css # Optimized responsive utilities
    ├── scroll-optimization.css # Scroll optimization
    ├── performance.css      # Performance utilities
    └── theme-transitions.css # Theme transition utilities
```

#### **🚫 CRITICAL CSS Architecture Rules**

##### **1. main.css - Import Only Rule**
```css
/* ✅ CORRECT: main.css should ONLY contain imports */
@import url('./base/variables.css');
@import url('./base/design-tokens.css');
@import url('./base/reset.css');
/* ... other imports ... */

/* ❌ FORBIDDEN: Never add direct styles to main.css */
.some-class { color: red; } /* NEVER DO THIS */
```

##### **2. Modular Page Organization**
- **Each page/tab gets its own directory** under `styles/pages/`
- **Complex pages are split into multiple CSS files** by functionality
- **Each CSS file has a single responsibility**

##### **3. CSS Import Hierarchy**
```css
/* main.css import order (STRICT) */
1. Base styles (variables, reset, typography)
2. Utilities (animations, accessibility, etc.)
3. Components (reusable UI components)
4. Layouts (main layout, tab layouts)
5. Pages (page-specific styles in order of complexity)
```

##### **4. Style Isolation Rules**
- **Page-specific styles MUST be in their respective page directories**
- **NO cross-page style dependencies** (except base/utilities)
- **Each page manages its own responsive design**
- **NO global overrides in main.css**

##### **5. CSS Specificity Guidelines**
- **Use BEM methodology** for component naming
- **Avoid `!important`** unless absolutely necessary
- **Prefer specific selectors** over generic ones
- **Page-specific styles take precedence** over component styles

##### **6. File Naming Conventions**
```
✅ CORRECT:
- search-filters.css (kebab-case)
- calendar-grid.css (kebab-case)
- world-exploration.css (kebab-case)

❌ FORBIDDEN:
- searchFilters.css (camelCase)
- calendar_grid.css (snake_case)
- SearchFilters.css (PascalCase)
```

##### **7. CSS Content Rules**
- **Each CSS file must have a clear purpose**
- **Include comments for complex sections**
- **Group related styles together**
- **Use CSS custom properties (variables) consistently**

##### **8. Responsive Design Organization**
- **Mobile-first approach** in all page-specific CSS
- **Responsive styles in the same file** as base styles
- **Use utility classes** for common responsive patterns
- **Avoid duplicate responsive code** across files

##### **9. Dark Mode Implementation**
- **Dark mode styles in the same file** as light mode
- **Use CSS custom properties** for theme switching
- **Consistent dark mode patterns** across all pages

##### **10. Performance Considerations**
- **Minimize CSS file size** by avoiding duplication
- **Use efficient selectors** (avoid deep nesting)
- **Leverage CSS custom properties** for theming
- **Optimize for critical rendering path**

#### **🔍 CSS Architecture Violation Checklist**

##### **Before Adding ANY CSS:**
1. **Is this style for a specific page/tab?** → Place in `styles/pages/[page-name]/`
2. **Is this a reusable component?** → Place in `styles/components/`
3. **Is this a utility class?** → Place in `styles/utilities/`
4. **Is this a base style?** → Place in `styles/base/`

##### **NEVER DO:**
- ❌ Add styles directly to `main.css`
- ❌ Create duplicate CSS files
- ❌ Mix page-specific styles in component files
- ❌ Use `!important` without justification
- ❌ Create overly specific selectors
- ❌ Duplicate responsive code across files

##### **ALWAYS DO:**
- ✅ Follow the modular directory structure
- ✅ Use BEM naming convention
- ✅ Include comments for complex sections
- ✅ Group related styles together
- ✅ Use CSS custom properties for theming
- ✅ Test responsive design on all breakpoints

##### **CSS File Size Limits:**
- **main.css**: < 50 lines (imports only)
- **Component files**: < 200 lines
- **Page files**: < 300 lines
- **Utility files**: < 150 lines

##### **Emergency CSS Fix Protocol:**
1. **Identify the correct file** based on functionality
2. **Move styles** to appropriate location
3. **Update imports** in main.css if needed
4. **Test** on all affected pages
5. **Document** the change in commit message

## 🔄 Data Flow Patterns

### 1. **Application Initialization**
```
index.html → app.js → TabManager → Load default tab
```

### 2. **Tab Switching Process**
```
User tab click → TabManager.switchTab() → 
Current tab cleanup() → Load new tab module → 
New tab render() → New tab bindEvents()
```

### 3. **Data Management Flow**
```
UI Event → Event Handler → Service Layer → 
Data Repository → Local Storage → UI Update
```

## 🎯 Design Patterns

### 1. **MVC Pattern**
- **Model**: Data and business logic
- **View**: UI rendering and user interface
- **Controller**: User input handling and state management

### 2. **Observer Pattern**
- Event-based communication
- Loose coupling
- Real-time UI updates

### 3. **Factory Pattern**
- Dynamic tab module creation
- Configuration-based component creation
- Flexible extensibility

### 4. **Strategy Pattern**
- Search algorithm strategies
- Sorting method strategies
- Rendering strategies

## 🚀 Performance Optimization

### 1. **Code Splitting**
- Tab-by-tab module separation
- Load only when needed
- Bundle size optimization

### 2. **Memory Management**
- Resource cleanup on tab switch
- Event listener cleanup
- DOM element cleanup

### 3. **Rendering Optimization**
- Virtual scrolling
- Lazy loading
- Image optimization

## 🔧 Module Development Guidelines

### **Tab Module Interface**
Every tab module must implement:
```javascript
class BaseTab {
    constructor() {
        this.isInitialized = false;
        this.container = null;
        this.eventListeners = []; // Event listener tracking
    }
    
    // Required methods
    render(container) { 
        this.container = container;
        this.renderContent();
        this.bindEvents();
        this.isInitialized = true;
    }
    
    renderContent() { /* Implementation required */ }
    bindEvents() { /* Implementation required */ }
    
    // Optional methods (recommended for complex tabs)
    async refresh() { /* Refresh data when tab becomes active */ }
    cleanup() { /* Clean up resources when tab is deactivated */ }
}
```

### **Complex Tab Module Pattern** (for modular tabs like my-logs)
```javascript
class ComplexTab {
    constructor() {
        this.isInitialized = false;
        this.container = null;
        this.eventListeners = [];
        this.controllers = new Map();
        this.views = new Map();
    }
    
    async render(container) {
        this.container = container;
        await this.initializeModules();
        this.renderContent();
        this.bindEvents();
        this.isInitialized = true;
    }
    
    async initializeModules() { /* Initialize controllers and views */ }
    renderContent() { /* Render main content */ }
    bindEvents() { /* Bind event listeners */ }
    cleanup() { /* Clean up all resources */ }
}
```

### **Module Lifecycle**
1. **Initialization**: Module instantiation and setup
2. **Rendering**: UI creation and DOM manipulation
3. **Event Binding**: User interaction handling
4. **Cleanup**: Resource cleanup and memory management

## 📊 Module Dependencies

### **Core Dependencies**
- [app.js](mdc:js/app.js) - Main application controller
- [app-config.js](mdc:js/config/app-config.js) - Configuration management

### **Common Modules**
- [storage-manager.js](mdc:js/modules/utils/storage-manager.js) - Data persistence
- [event-manager.js](mdc:js/modules/utils/event-manager.js) - Event handling
- [toast-manager.js](mdc:js/modules/ui-components/toast-manager.js) - Notifications

### **Tab-Specific Modules**
- Search: [SearchTab.js](mdc:js/modules/search/SearchTab.js)
- Calendar: [CalendarRenderer.js](mdc:js/modules/calendar/CalendarRenderer.js)
- My Logs: [MyLogsController.js](mdc:js/tabs/my-logs/controllers/MyLogsController.js)

## 🔒 Security Considerations

### 1. **Input Validation**
- User input sanitization
- XSS attack prevention
- CSRF token management

### 2. **Data Protection**
- Sensitive information encryption
- Local storage security
- API key security

## 🧪 Testing Strategy

### 1. **Unit Testing**
- Module-by-module functionality testing
- Utility function testing
- Component testing

### 2. **Integration Testing**
- Inter-tab interaction testing
- Data flow testing
- API integration testing

### 3. **E2E Testing**
- User scenario testing
- Cross-browser testing
- Performance testing

## 🔮 Future Architecture Improvements

### 1. **Micro Frontend**
- Independent tab deployment
- Improved version management
- Team-independent development

### 2. **State Management Improvement**
- Global state management introduction
- Improved state synchronization
- Enhanced debugging tools

### 3. **Performance Monitoring**
- Real-time performance metrics
- User behavior analysis
- Automatic optimization