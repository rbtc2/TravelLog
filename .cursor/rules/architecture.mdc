---
alwaysApply: true
description: TravelLog project architecture and module structure guidelines
---

# 🏗️ TravelLog Architecture Rules

## 📋 Project Overview
TravelLog is a modular SPA (Single Page Application) with a 5-tab structure. Each tab operates independently with dynamic module loading for optimal performance.

## 🏛️ Core Architecture Principles

### 1. **Modularity** 
- Each feature is separated into independent modules
- Clear interfaces and separation of concerns
- Reusable component design

### 2. **Independence**
- Minimal dependencies between tabs
- Each module manages its own lifecycle
- Isolated state management

### 3. **Scalability**
- Plugin-style tab addition
- Independent version management per module
- Progressive feature expansion

### 4. **Performance**
- Lazy Loading (Lazy Loading)
- Memory-efficient resource management
- Optimized rendering pipeline

## 📁 File Structure Guidelines

### **JavaScript Module Structure**
```
js/
├── app.js                     # Main application entry point
├── config/                    # Configuration files
│   ├── app-config.js         # App configuration and metadata
│   └── form-config.js        # Form configuration
├── data/                      # Data management
│   └── countries-manager.js   # Country data management
├── modules/                   # Common modules
│   ├── search/               # Search system (refactored)
│   │   ├── engines/          # Search engines
│   │   ├── handlers/         # Event handlers
│   │   ├── managers/         # State and data managers
│   │   ├── renderers/        # UI renderers
│   │   ├── utils/            # Search utilities
│   │   └── SearchTab.js      # Main search controller
│   ├── calendar/             # Calendar module
│   │   ├── handlers/         # Event handlers
│   │   ├── modals/           # Calendar modals
│   │   ├── CalendarDataManager.js
│   │   ├── CalendarRenderer.js
│   │   └── CalendarUtils.js
│   ├── services/             # Service layer
│   │   └── log-service.js    # Log service
│   ├── ui-components/        # UI components
│   │   ├── country-selector.js
│   │   ├── modal-manager.js
│   │   ├── pagination-manager.js
│   │   ├── toast-manager.js
│   │   └── view-manager.js
│   ├── utils/                # Utility functions
│   │   ├── country-data-manager.js
│   │   ├── demo-data.js
│   │   ├── event-manager.js
│   │   ├── search-utility.js
│   │   └── storage-manager.js
│   ├── log-detail.js         # Log detail module
│   ├── log-edit.js           # Log edit module
│   └── repository.js         # Data repository
└── tabs/                     # Tab modules
    ├── home.js              # Home tab
    ├── search.js            # Search tab (legacy)
    ├── add-log.js           # Add log tab
    ├── calendar.js          # Calendar tab
    └── my-logs/             # My logs tab (modular structure)
        ├── controllers/
        │   └── MyLogsController.js
        ├── views/
        │   ├── HubView.js
        │   ├── LogsListView.js
        │   ├── SettingsView.js
        │   └── TravelReportView.js
        └── my-logs.js       # Main my-logs entry point
```

### **CSS Architecture Reference**

> **Note**: Detailed CSS structure and organization rules are now managed in [styling.mdc](mdc:.cursor/rules/styling.mdc) and [css-namespace.mdc](mdc:.cursor/rules/css-namespace.mdc). This section focuses on JavaScript architecture patterns.

### **JavaScript Architecture Patterns**

#### **1. Module Lifecycle Management**
- **Initialization**: Module instantiation and setup
- **Rendering**: UI creation and DOM manipulation
- **Event Binding**: User interaction handling
- **Cleanup**: Resource cleanup and memory management

#### **2. Namespace System Integration**
- **Every tab MUST add its namespace class** in JavaScript
- **CSS rules are automatically prefixed** with appropriate namespace
- **Complete style isolation** between tabs
- **Namespace validation** before any CSS changes

> **Note**: Detailed CSS architecture rules are managed in [styling.mdc](mdc:.cursor/rules/styling.mdc) and [css-namespace.mdc](mdc:.cursor/rules/css-namespace.mdc).

#### **🔍 JavaScript Architecture Checklist**

##### **Before Adding ANY JavaScript Module:**
1. **Is this a tab module?** → Add namespace class in render method
2. **Is this a sub-tab module?** → Add both main and sub-tab namespace classes
3. **Is this a component?** → No namespace required
4. **Is this a utility?** → No namespace required

##### **NEVER DO:**
- ❌ Forget to add namespace classes to tab containers
- ❌ Create modules without proper cleanup methods
- ❌ Mix different concerns in single modules
- ❌ Ignore event listener cleanup
- ❌ Create memory leaks with timeouts/intervals

##### **ALWAYS DO:**
- ✅ Add namespace classes to tab containers
- ✅ Implement proper cleanup methods
- ✅ Use consistent module patterns
- ✅ Handle errors gracefully
- ✅ Follow established naming conventions
- ✅ Validate namespace consistency

> **Note**: CSS-specific architecture rules are managed in [styling.mdc](mdc:.cursor/rules/styling.mdc) and [css-namespace.mdc](mdc:.cursor/rules/css-namespace.mdc).

## 🔄 Data Flow Patterns

### 1. **Application Initialization**
```
index.html → app.js → TabManager → Load default tab
```

### 2. **Tab Switching Process**
```
User tab click → TabManager.switchTab() → 
Current tab cleanup() → Load new tab module → 
New tab render() → New tab bindEvents()
```

### 3. **Data Management Flow**
```
UI Event → Event Handler → Service Layer → 
Data Repository → Local Storage → UI Update
```

## 🎯 Design Patterns

### 1. **MVC Pattern**
- **Model**: Data and business logic
- **View**: UI rendering and user interface
- **Controller**: User input handling and state management

### 2. **Observer Pattern**
- Event-based communication
- Loose coupling
- Real-time UI updates

### 3. **Factory Pattern**
- Dynamic tab module creation
- Configuration-based component creation
- Flexible extensibility

### 4. **Strategy Pattern**
- Search algorithm strategies
- Sorting method strategies
- Rendering strategies

## 🚀 Performance Optimization

### 1. **Code Splitting**
- Tab-by-tab module separation
- Load only when needed
- Bundle size optimization

### 2. **Memory Management**
- Resource cleanup on tab switch
- Event listener cleanup
- DOM element cleanup

### 3. **Rendering Optimization**
- Virtual scrolling
- Lazy loading
- Image optimization

## 🔧 Module Development Guidelines

### **Tab Module Interface**
Every tab module must implement:
```javascript
class BaseTab {
    constructor() {
        this.isInitialized = false;
        this.container = null;
        this.eventListeners = []; // Event listener tracking
    }
    
    // Required methods
    render(container) { 
        this.container = container;
        this.renderContent();
        this.bindEvents();
        this.isInitialized = true;
    }
    
    renderContent() { /* Implementation required */ }
    bindEvents() { /* Implementation required */ }
    
    // Optional methods (recommended for complex tabs)
    async refresh() { /* Refresh data when tab becomes active */ }
    cleanup() { /* Clean up resources when tab is deactivated */ }
}
```

### **Complex Tab Module Pattern** (for modular tabs like my-logs)
```javascript
class ComplexTab {
    constructor() {
        this.isInitialized = false;
        this.container = null;
        this.eventListeners = [];
        this.controllers = new Map();
        this.views = new Map();
    }
    
    async render(container) {
        this.container = container;
        await this.initializeModules();
        this.renderContent();
        this.bindEvents();
        this.isInitialized = true;
    }
    
    async initializeModules() { /* Initialize controllers and views */ }
    renderContent() { /* Render main content */ }
    bindEvents() { /* Bind event listeners */ }
    cleanup() { /* Clean up all resources */ }
}
```

### **Module Lifecycle**
1. **Initialization**: Module instantiation and setup
2. **Rendering**: UI creation and DOM manipulation
3. **Event Binding**: User interaction handling
4. **Cleanup**: Resource cleanup and memory management

## 📊 Module Dependencies

### **Core Dependencies**
- [app.js](mdc:js/app.js) - Main application controller
- [app-config.js](mdc:js/config/app-config.js) - Configuration management

### **Common Modules**
- [storage-manager.js](mdc:js/modules/utils/storage-manager.js) - Data persistence
- [event-manager.js](mdc:js/modules/utils/event-manager.js) - Event handling
- [toast-manager.js](mdc:js/modules/ui-components/toast-manager.js) - Notifications

### **Tab-Specific Modules**
- Search: [SearchTab.js](mdc:js/modules/search/SearchTab.js)
- Calendar: [CalendarRenderer.js](mdc:js/modules/calendar/CalendarRenderer.js)
- My Logs: [MyLogsController.js](mdc:js/tabs/my-logs/controllers/MyLogsController.js)

## 🔒 Security Considerations

### 1. **Input Validation**
- User input sanitization
- XSS attack prevention
- CSRF token management

### 2. **Data Protection**
- Sensitive information encryption
- Local storage security
- API key security

## 🧪 Testing Strategy

### 1. **Unit Testing**
- Module-by-module functionality testing
- Utility function testing
- Component testing

### 2. **Integration Testing**
- Inter-tab interaction testing
- Data flow testing
- API integration testing

### 3. **E2E Testing**
- User scenario testing
- Cross-browser testing
- Performance testing

## 🔮 Future Architecture Improvements

### 1. **Micro Frontend**
- Independent tab deployment
- Improved version management
- Team-independent development

### 2. **State Management Improvement**
- Global state management introduction
- Improved state synchronization
- Enhanced debugging tools

### 3. **Performance Monitoring**
- Real-time performance metrics
- User behavior analysis
- Automatic optimization