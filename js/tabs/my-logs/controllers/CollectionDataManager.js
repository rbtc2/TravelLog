/**
 * CollectionDataManager - Ïª¨Î†âÏÖò Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨ Ï†ÑÏö© Îß§ÎãàÏ†Ä
 * 
 * üéØ Ï±ÖÏûÑ:
 * - Ïª¨Î†âÏÖò Îç∞Ïù¥ÌÑ∞Ïùò Î≥ÄÌôò Î∞è ÌïÑÌÑ∞ÎßÅ
 * - Îç∞Ïù¥ÌÑ∞ Ï†ïÎ†¨ Î∞è Í≤ÄÏÉâ Í∏∞Îä•
 * - ÏÑ±Îä• ÏµúÏ†ÅÌôîÎêú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
 * - Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
 * 
 * @class CollectionDataManager
 * @version 1.0.0
 * @since 2024-12-29
 */

import { countriesManager } from '../../../data/countries-manager.js';

class CollectionDataManager {
    constructor() {
        this.countriesManager = countriesManager;
        this.dataCache = new Map();
        this.cacheTTL = 10 * 60 * 1000; // 10Î∂Ñ Ï∫êÏãú
    }

    /**
     * Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞Î•º Ïª¨Î†âÏÖòÏö©ÏúºÎ°ú Î≥ÄÌôòÌï©ÎãàÎã§
     * @param {Object} visitedCountries - Î∞©Î¨∏Ìïú Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞
     * @param {Object} options - Î≥ÄÌôò ÏòµÏÖò
     * @returns {Array} Î≥ÄÌôòÎêú Íµ≠Í∞Ä Î∞∞Ïó¥
     */
    transformCountriesForCollection(visitedCountries, options = {}) {
        try {
            const {
                sortBy = 'visitCount',
                sortOrder = 'desc',
                filterContinent = 'all',
                searchQuery = ''
            } = options;

            let countries = Object.values(visitedCountries.countries || {});

            // ÎåÄÎ•ô ÌïÑÌÑ∞ÎßÅ
            if (filterContinent !== 'all') {
                countries = countries.filter(country => country.continent === filterContinent);
            }

            // Í≤ÄÏÉâ ÏøºÎ¶¨ ÌïÑÌÑ∞ÎßÅ
            if (searchQuery) {
                const query = searchQuery.toLowerCase();
                countries = countries.filter(country => 
                    country.name.toLowerCase().includes(query) ||
                    country.nameKo.toLowerCase().includes(query) ||
                    country.code.toLowerCase().includes(query)
                );
            }

            // Ï†ïÎ†¨
            countries = this._sortCountries(countries, sortBy, sortOrder);

            return countries;
        } catch (error) {
            console.error('CollectionDataManager: transformCountriesForCollection Ïã§Ìå®:', error);
            return [];
        }
    }

    /**
     * ÎåÄÎ•ôÎ≥Ñ ÌÜµÍ≥ÑÎ•º Ïª¨Î†âÏÖòÏö©ÏúºÎ°ú Î≥ÄÌôòÌï©ÎãàÎã§
     * @param {Array} continentStats - ÎåÄÎ•ôÎ≥Ñ ÌÜµÍ≥Ñ
     * @returns {Array} Î≥ÄÌôòÎêú ÎåÄÎ•ô ÌÜµÍ≥Ñ
     */
    transformContinentStatsForCollection(continentStats) {
        try {
            return continentStats.map(stat => ({
                ...stat,
                progressBar: this._calculateProgressBar(stat.percentage),
                status: this._getContinentStatus(stat.percentage)
            }));
        } catch (error) {
            console.error('CollectionDataManager: transformContinentStatsForCollection Ïã§Ìå®:', error);
            return [];
        }
    }

    /**
     * Ïª¨Î†âÏÖò ÌÜµÍ≥ÑÎ•º Í≥ÑÏÇ∞Ìï©ÎãàÎã§
     * @param {Object} collectionStats - Í∏∞Î≥∏ Ïª¨Î†âÏÖò ÌÜµÍ≥Ñ
     * @returns {Object} ÌôïÏû•Îêú Ïª¨Î†âÏÖò ÌÜµÍ≥Ñ
     */
    calculateExtendedCollectionStats(collectionStats) {
        try {
            const { visited, total, continents } = collectionStats;
            
            // ÎåÄÎ•ôÎ≥Ñ ÏßÑÌñâÎ•† Í≥ÑÏÇ∞
            const continentProgress = continents.map(continent => ({
                ...continent,
                progressBar: this._calculateProgressBar(continent.percentage),
                status: this._getContinentStatus(continent.percentage)
            }));

            // Ï†ÑÏ≤¥ ÏßÑÌñâÎ•† Í≥ÑÏÇ∞
            const overallProgress = this._calculateProgressBar(collectionStats.percentage);
            const overallStatus = this._getOverallStatus(collectionStats.percentage);

            // Îã§Ïùå Î™©Ìëú Í≥ÑÏÇ∞
            const nextMilestone = this._calculateNextMilestone(visited);

            return {
                ...collectionStats,
                continentProgress,
                overallProgress,
                overallStatus,
                nextMilestone,
                achievements: this._calculateAchievements(visited, continents)
            };
        } catch (error) {
            console.error('CollectionDataManager: calculateExtendedCollectionStats Ïã§Ìå®:', error);
            return collectionStats;
        }
    }

    /**
     * Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞Î•º Ï†ïÎ†¨Ìï©ÎãàÎã§
     * @param {Array} countries - Íµ≠Í∞Ä Î∞∞Ïó¥
     * @param {string} sortBy - Ï†ïÎ†¨ Í∏∞Ï§Ä
     * @param {string} sortOrder - Ï†ïÎ†¨ ÏàúÏÑú
     * @returns {Array} Ï†ïÎ†¨Îêú Íµ≠Í∞Ä Î∞∞Ïó¥
     * @private
     */
    _sortCountries(countries, sortBy, sortOrder) {
        const order = sortOrder === 'desc' ? -1 : 1;
        
        return countries.sort((a, b) => {
            let aValue, bValue;
            
            switch (sortBy) {
                case 'visitCount':
                    aValue = a.visitCount || 0;
                    bValue = b.visitCount || 0;
                    break;
                case 'lastVisit':
                    aValue = new Date(a.lastVisit || 0);
                    bValue = new Date(b.lastVisit || 0);
                    break;
                case 'totalDays':
                    aValue = a.totalDays || 0;
                    bValue = b.totalDays || 0;
                    break;
                case 'averageRating':
                    aValue = a.averageRating || 0;
                    bValue = b.averageRating || 0;
                    break;
                case 'name':
                    aValue = a.nameKo || a.name || '';
                    bValue = b.nameKo || b.name || '';
                    break;
                default:
                    aValue = a.visitCount || 0;
                    bValue = b.visitCount || 0;
            }
            
            if (aValue < bValue) return -1 * order;
            if (aValue > bValue) return 1 * order;
            return 0;
        });
    }

    /**
     * ÏßÑÌñâÎ•† Î∞î Í≥ÑÏÇ∞
     * @param {number} percentage - ÌçºÏÑºÌä∏
     * @returns {Object} ÏßÑÌñâÎ•† Î∞î Ï†ïÎ≥¥
     * @private
     */
    _calculateProgressBar(percentage) {
        const clampedPercentage = Math.min(Math.max(percentage, 0), 100);
        const width = Math.round(clampedPercentage);
        
        return {
            width: width,
            percentage: clampedPercentage,
            color: this._getProgressColor(clampedPercentage)
        };
    }

    /**
     * ÏßÑÌñâÎ•†Ïóê Îî∞Î•∏ ÏÉâÏÉÅ Í≤∞Ï†ï
     * @param {number} percentage - ÌçºÏÑºÌä∏
     * @returns {string} ÏÉâÏÉÅ ÌÅ¥ÎûòÏä§
     * @private
     */
    _getProgressColor(percentage) {
        if (percentage >= 80) return 'progress-high';
        if (percentage >= 60) return 'progress-medium-high';
        if (percentage >= 40) return 'progress-medium';
        if (percentage >= 20) return 'progress-low';
        return 'progress-very-low';
    }

    /**
     * ÎåÄÎ•ô ÏÉÅÌÉú Í≤∞Ï†ï
     * @param {number} percentage - ÌçºÏÑºÌä∏
     * @returns {string} ÏÉÅÌÉú
     * @private
     */
    _getContinentStatus(percentage) {
        if (percentage >= 80) return 'excellent';
        if (percentage >= 60) return 'good';
        if (percentage >= 40) return 'fair';
        if (percentage >= 20) return 'poor';
        return 'very-poor';
    }

    /**
     * Ï†ÑÏ≤¥ ÏÉÅÌÉú Í≤∞Ï†ï
     * @param {number} percentage - ÌçºÏÑºÌä∏
     * @returns {string} ÏÉÅÌÉú
     * @private
     */
    _getOverallStatus(percentage) {
        if (percentage >= 50) return 'excellent';
        if (percentage >= 30) return 'good';
        if (percentage >= 15) return 'fair';
        if (percentage >= 5) return 'poor';
        return 'very-poor';
    }

    /**
     * Îã§Ïùå ÎßàÏùºÏä§ÌÜ§ Í≥ÑÏÇ∞
     * @param {number} visited - Î∞©Î¨∏Ìïú Íµ≠Í∞Ä Ïàò
     * @returns {Object} Îã§Ïùå ÎßàÏùºÏä§ÌÜ§ Ï†ïÎ≥¥
     * @private
     */
    _calculateNextMilestone(visited) {
        const milestones = [5, 10, 20, 30, 50, 75, 100, 150, 195];
        const next = milestones.find(milestone => visited < milestone);
        
        if (next) {
            return {
                target: next,
                remaining: next - visited,
                percentage: Math.round((visited / next) * 100)
            };
        }
        
        return {
            target: 195,
            remaining: 0,
            percentage: 100
        };
    }

    /**
     * ÏóÖÏ†Å Í≥ÑÏÇ∞
     * @param {number} visited - Î∞©Î¨∏Ìïú Íµ≠Í∞Ä Ïàò
     * @param {Array} continents - ÎåÄÎ•ôÎ≥Ñ ÌÜµÍ≥Ñ
     * @returns {Array} ÏóÖÏ†Å Î™©Î°ù
     * @private
     */
    _calculateAchievements(visited, continents) {
        const achievements = [];
        
        // Íµ≠Í∞Ä Ïàò ÏóÖÏ†Å
        if (visited >= 1) achievements.push({ id: 'first_country', name: 'Ï≤´ Ïó¨Ìñâ', description: 'Ï≤´ Î≤àÏß∏ Íµ≠Í∞Ä Î∞©Î¨∏' });
        if (visited >= 5) achievements.push({ id: 'explorer', name: 'ÌÉêÌóòÍ∞Ä', description: '5Í∞úÍµ≠ Î∞©Î¨∏' });
        if (visited >= 10) achievements.push({ id: 'traveler', name: 'Ïó¨ÌñâÏûê', description: '10Í∞úÍµ≠ Î∞©Î¨∏' });
        if (visited >= 20) achievements.push({ id: 'globetrotter', name: 'Í∏ÄÎ°úÎ≤å Ìä∏Î°úÌÑ∞', description: '20Í∞úÍµ≠ Î∞©Î¨∏' });
        if (visited >= 50) achievements.push({ id: 'world_traveler', name: 'ÏÑ∏Í≥Ñ Ïó¨ÌñâÏûê', description: '50Í∞úÍµ≠ Î∞©Î¨∏' });
        if (visited >= 100) achievements.push({ id: 'master_traveler', name: 'ÎßàÏä§ÌÑ∞ Ïó¨ÌñâÏûê', description: '100Í∞úÍµ≠ Î∞©Î¨∏' });
        if (visited >= 195) achievements.push({ id: 'world_complete', name: 'ÏÑ∏Í≥Ñ ÏôÑÏ£º', description: 'Î™®Îì† Íµ≠Í∞Ä Î∞©Î¨∏' });
        
        // ÎåÄÎ•ôÎ≥Ñ ÏóÖÏ†Å
        continents.forEach(continent => {
            if (continent.percentage >= 100) {
                achievements.push({
                    id: `continent_${continent.continent.toLowerCase()}`,
                    name: `${continent.nameKo} ÏôÑÏ£º`,
                    description: `${continent.nameKo} Î™®Îì† Íµ≠Í∞Ä Î∞©Î¨∏`
                });
            }
        });
        
        return achievements;
    }

    /**
     * Îç∞Ïù¥ÌÑ∞ Ï∫êÏãúÎ•º Î¨¥Ìö®ÌôîÌï©ÎãàÎã§
     */
    invalidateCache() {
        this.dataCache.clear();
    }

    /**
     * Îß§ÎãàÏ†Ä Ï†ïÎ¶¨
     */
    cleanup() {
        this.invalidateCache();
    }
}

export { CollectionDataManager };
